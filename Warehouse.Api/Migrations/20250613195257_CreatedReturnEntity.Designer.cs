// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse.Api.Data;

#nullable disable

namespace Warehouse.Api.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    [Migration("20250613195257_CreatedReturnEntity")]
    partial class CreatedReturnEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FulfillmentReturn", b =>
                {
                    b.Property<Guid>("FulfillmentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReturnsId")
                        .HasColumnType("char(36)");

                    b.HasKey("FulfillmentsId", "ReturnsId");

                    b.HasIndex("ReturnsId");

                    b.ToTable("FulfillmentReturn");
                });

            modelBuilder.Entity("FulfillmentReturnMerchandiseAuthorization", b =>
                {
                    b.Property<Guid>("FulfillmentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReturnMerchandiseAuthorizationsId")
                        .HasColumnType("char(36)");

                    b.HasKey("FulfillmentsId", "ReturnMerchandiseAuthorizationsId");

                    b.HasIndex("ReturnMerchandiseAuthorizationsId");

                    b.ToTable("FulfillmentReturnMerchandiseAuthorization");
                });

            modelBuilder.Entity("ReturnReturnMerchandiseAuthorization", b =>
                {
                    b.Property<Guid>("ReturnMerchandiseAuthorizationsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReturnsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ReturnMerchandiseAuthorizationsId", "ReturnsId");

                    b.HasIndex("ReturnsId");

                    b.ToTable("ReturnReturnMerchandiseAuthorization");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.Fulfillment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PickupPointAddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ServiceLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ShippingAddressId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PickupPointAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Fulfillments");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.FulfillmentLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DistributionCenter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("FulfillmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FulfillmentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ShippingDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("FulfillmentId");

                    b.ToTable("FulfillmentLines");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.FulfillmentPickupPointAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PickupPointId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PickupPointName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FulfillmentPickupPointAddresses");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.FulfillmentShippingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FulfillmentShippingAddresses");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.Return", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReturnRequestId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.ReturnLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DistributionCenter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ReturnId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ReturnId");

                    b.ToTable("ReturnLines");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.ReturnMerchandiseAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DistributionCenter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReturnRequestId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ReturnMerchandiseAuthorizations");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.ReturnMerchandiseAuthorizationLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ReturnMerchandiseAuthorizationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ReturnMerchandiseAuthorizationId");

                    b.ToTable("ReturnMerchandiseAuthorizationLines");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.TrackAndTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReturnMerchandiseAuthorizationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TrackAndTraceCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ReturnMerchandiseAuthorizationId");

                    b.ToTable("TrackAndTraces");
                });

            modelBuilder.Entity("FulfillmentReturn", b =>
                {
                    b.HasOne("Warehouse.Api.Entities.Fulfillment", null)
                        .WithMany()
                        .HasForeignKey("FulfillmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Api.Entities.Return", null)
                        .WithMany()
                        .HasForeignKey("ReturnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FulfillmentReturnMerchandiseAuthorization", b =>
                {
                    b.HasOne("Warehouse.Api.Entities.Fulfillment", null)
                        .WithMany()
                        .HasForeignKey("FulfillmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Api.Entities.ReturnMerchandiseAuthorization", null)
                        .WithMany()
                        .HasForeignKey("ReturnMerchandiseAuthorizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReturnReturnMerchandiseAuthorization", b =>
                {
                    b.HasOne("Warehouse.Api.Entities.ReturnMerchandiseAuthorization", null)
                        .WithMany()
                        .HasForeignKey("ReturnMerchandiseAuthorizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Api.Entities.Return", null)
                        .WithMany()
                        .HasForeignKey("ReturnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Api.Entities.Fulfillment", b =>
                {
                    b.HasOne("Warehouse.Api.Entities.FulfillmentPickupPointAddress", "PickupPointAddress")
                        .WithMany()
                        .HasForeignKey("PickupPointAddressId");

                    b.HasOne("Warehouse.Api.Entities.FulfillmentShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PickupPointAddress");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.FulfillmentLine", b =>
                {
                    b.HasOne("Warehouse.Api.Entities.Fulfillment", null)
                        .WithMany("Lines")
                        .HasForeignKey("FulfillmentId");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.ReturnLine", b =>
                {
                    b.HasOne("Warehouse.Api.Entities.Return", null)
                        .WithMany("Lines")
                        .HasForeignKey("ReturnId");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.ReturnMerchandiseAuthorizationLine", b =>
                {
                    b.HasOne("Warehouse.Api.Entities.ReturnMerchandiseAuthorization", "ReturnMerchandiseAuthorization")
                        .WithMany("Lines")
                        .HasForeignKey("ReturnMerchandiseAuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReturnMerchandiseAuthorization");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.TrackAndTrace", b =>
                {
                    b.HasOne("Warehouse.Api.Entities.ReturnMerchandiseAuthorization", "ReturnMerchandiseAuthorization")
                        .WithMany("TrackAndTraces")
                        .HasForeignKey("ReturnMerchandiseAuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReturnMerchandiseAuthorization");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.Fulfillment", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.Return", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Warehouse.Api.Entities.ReturnMerchandiseAuthorization", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("TrackAndTraces");
                });
#pragma warning restore 612, 618
        }
    }
}
